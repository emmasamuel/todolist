{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\EMMANUEL\\\\Desktop\\\\testjava\\\\pages\\\\index.js\";\n// import React, { Component } from \"react\";\n//  class index extends Component {\n// constructor(props){\n//   super(props);\n// this.state = {\n//   userInput: '',\n//   list: []\n// }\n// }\n// changeUserInput(input){\n//   this.setState({\n//     userInput: input\n//   }, () => console.log(input))//you cany add a console.log() to check what you did was okay.\n// }\n// addToList(input){\n//   let listArray = this.state.list;\n//   listArray.push(input);\n//   this.setState({\n//     list: listArray,\n//     userInput: ''\n//   })\n// }\n// render(){\n// return(\n// <div className=\"to-do-list-main\"> \n// <input\n//  onChange={ (e)=>this.changeUserInput(e.target.value)}// all this are inside the input\n//   value={this.state.userInput}\n//    type=\"text\" \n//    />\n// <button onClick={ () => this.addToList(this.state.userInput)}  > PRESS ME</button>\n// <ul>\n// {this.state.list.map((val)=> <li>{val}</li>)};\n// </ul>\n// </div>\n// );\n// }\n// }\nimport React, { Component } from 'react';\nimport note from './component/note';\n\nvar index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(index, _Component);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function (event) {\n      if (event.key === 'Enter') {}\n    });\n\n    _this.state = {\n      noteText: '',\n      notes: []\n    };\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"updateNoteText\",\n    value: function updateNoteText(noteText) {\n      this.setState({\n        noteText: noteText.target.value\n      });\n    }\n  }, {\n    key: \"addNote\",\n    value: function addNote() {}\n  }, {\n    key: \"deleteNote\",\n    value: function deleteNote(index) {\n      var notesArr = this.state.note;\n      notesArr.splice(index, 1);\n      this.setState({\n        notes: notesArr\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var notes = this.state.notes.map(function (val, key) {\n        return React.createElement(Note, {\n          key: key,\n          text: val,\n          deleteMethod: function deleteMethod() {\n            return _this2.deleteNote(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"TODO LIST\"), React.createElement(\"div\", {\n        className: \"btn\",\n        onClick: this.addNote.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"input\", {\n        type: \"text\",\n        ref: function ref(input) {\n          _this2.textInput = input;\n        },\n        className: \"textInput\",\n        value: this.state.notetext,\n        onChangeText: function onChangeText(noteText) {\n          return _this2.updateNoteText(noteText);\n        },\n        onKeyPress: this.handleKeyPress.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return index;\n}(Component);\n\nexport default index;","map":{"version":3,"sources":["C:\\Users\\EMMANUEL\\Desktop\\testjava\\pages\\index.js"],"names":["React","Component","note","index","props","event","key","state","noteText","notes","setState","target","value","notesArr","splice","map","val","deleteNote","addNote","bind","input","textInput","notetext","updateNoteText","handleKeyPress"],"mappings":";;;;;;;;AAAA;AAIA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAGA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;IAEMC,K;;;;;AAEN,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;;AADiB,qEAuBF,UAACC,KAAD,EAAW;AAC1B,UAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B,CAE1B;AACF,KA3BkB;;AAEjB,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAFiB;AAMlB;;;;mCAEcD,Q,EAAU;AACvB,WAAKE,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAEA,QAAQ,CAACG,MAAT,CAAgBC;AAA5B,OAAd;AACD;;;8BAIS,CAIT;;;+BAYUT,K,EAAO;AAChB,UAAIU,QAAQ,GAAG,KAAKN,KAAL,CAAWL,IAA1B;AACAW,MAAAA,QAAQ,CAACC,MAAT,CAAgBX,KAAhB,EAAuB,CAAvB;AACA,WAAKO,QAAL,CAAc;AAACD,QAAAA,KAAK,EAAEI;AAAR,OAAd;AACD;;;6BAKQ;AAAA;;AAGT,UAAIJ,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAX,CAAiBM,GAAjB,CAAqB,UAACC,GAAD,EAAKV,GAAL,EAAW;AAE1C,eAAO,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEA,GAAX;AAAgB,UAAA,IAAI,EAAEU,GAAtB;AACD,UAAA,YAAY,EAAG;AAAA,mBAAK,MAAI,CAACC,UAAL,CAAgBX,GAAhB,CAAL;AAAA,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAED,OAJW,CAAZ;AAOA,aAKA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFA,EAIA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,OAAO,EAAE,KAAKY,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJA,EAMA;AACC,QAAA,IAAI,EAAC,MADN;AAEE,QAAA,GAAG,EAAG,aAACC,KAAD,EAAW;AAAC,UAAA,MAAI,CAACC,SAAL,GAAiBD,KAAjB;AAAuB,SAF3C;AAGE,QAAA,SAAS,EAAC,WAHZ;AAIE,QAAA,KAAK,EAAE,KAAKb,KAAL,CAAWe,QAJpB;AAKE,QAAA,YAAY,EAAE,sBAAAd,QAAQ;AAAA,iBAAI,MAAI,CAACe,cAAL,CAAoBf,QAApB,CAAJ;AAAA,SALxB;AAME,QAAA,UAAU,EAAE,KAAKgB,cAAL,CAAoBL,IAApB,CAAyB,IAAzB,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANA,CALA;AA0BC;;;;EA7EmBlB,S;;AAwFpB,eAAeE,KAAf","sourcesContent":["// import React, { Component } from \"react\";\r\n\r\n\r\n\r\n//  class index extends Component {\r\n\r\n\r\n// constructor(props){\r\n//   super(props);\r\n\r\n\r\n// this.state = {\r\n//   userInput: '',\r\n//   list: []\r\n// }\r\n\r\n// }\r\n\r\n\r\n// changeUserInput(input){\r\n\r\n//   this.setState({\r\n\r\n//     userInput: input\r\n//   }, () => console.log(input))//you cany add a console.log() to check what you did was okay.\r\n// }\r\n\r\n// addToList(input){\r\n//   let listArray = this.state.list;\r\n\r\n//   listArray.push(input);\r\n\r\n//   this.setState({\r\n//     list: listArray,\r\n//     userInput: ''\r\n//   })\r\n\r\n// }\r\n\r\n\r\n// render(){\r\n\r\n// return(\r\n\r\n// <div className=\"to-do-list-main\"> \r\n\r\n// <input\r\n//  onChange={ (e)=>this.changeUserInput(e.target.value)}// all this are inside the input\r\n//   value={this.state.userInput}\r\n//    type=\"text\" \r\n//    />\r\n\r\n// <button onClick={ () => this.addToList(this.state.userInput)}  > PRESS ME</button>\r\n// <ul>\r\n// {this.state.list.map((val)=> <li>{val}</li>)};\r\n// </ul>\r\n\r\n// </div>\r\n\r\n\r\n// );\r\n\r\n\r\n// }\r\n\r\n\r\n// }\r\n\r\nimport React, { Component  } from 'react';\r\nimport note from './component/note';\r\n\r\nclass index extends Component {\r\n\r\nconstructor(props) {\r\n  super(props);\r\n  this.state = {\r\n    noteText: '',\r\n    notes: [],\r\n  }\r\n}\r\n\r\nupdateNoteText(noteText) {\r\n  this.setState({ noteText: noteText.target.value })\r\n}\r\n\r\n\r\n\r\naddNote() {\r\n\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n\r\nhandleKeyPress = (event) => {\r\n  if (event.key === 'Enter') {\r\n\r\n  }\r\n}\r\n\r\n\r\ndeleteNote(index) {\r\n  var notesArr = this.state.note;\r\n  notesArr.splice(index, 1);\r\n  this.setState({notes: notesArr})\r\n}\r\n\r\n\r\n\r\n\r\nrender() {\r\n\r\n\r\nvar notes = this.state.notes.map((val,key)=>{\r\n\r\n  return <Note key={key} text={val}\r\n        deleteMethod={ ()=> this.deleteNote(key) } />\r\n})\r\n\r\n\r\nreturn (\r\n\r\n\r\n\r\n\r\n<div className=\"container\">\r\n\r\n<div className=\"header\">TODO LIST</div>\r\n\r\n<div className=\"btn\" onClick={this.addNote.bind(this)}>+</div>\r\n\r\n<input\r\n type=\"text\"\r\n  ref={((input) => {this.textInput = input})}\r\n  className=\"textInput\"\r\n  value={this.state.notetext}\r\n  onChangeText={noteText => this.updateNoteText(noteText)}\r\n  onKeyPress={this.handleKeyPress.bind(this)}\r\n  />\r\n\r\n\r\n</div>\r\n\r\n\r\n);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default index;"]},"metadata":{},"sourceType":"module"}